--- a/core/oslib/audiobackend_alsa.cpp
+++ b/core/oslib/audiobackend_alsa.cpp
@@ -3,10 +3,7 @@
 #include <alsa/asoundlib.h>
 #include "cfg/cfg.h"
 
-static snd_pcm_t *handle;
-static bool pcm_blocking = true;
-static snd_pcm_uframes_t buffer_size;
-static snd_pcm_uframes_t period_size;
+snd_pcm_t *handle;
 
 // We're making these functions static - there's no need to pollute the global namespace
 static void alsa_init()
@@ -14,6 +11,7 @@
 	snd_pcm_hw_params_t *params;
 	unsigned int val;
 	int dir=-1;
+	snd_pcm_uframes_t frames;
 
 	string device = cfgLoadStr("alsa", "device", "");
 
@@ -102,24 +100,20 @@
 	}
 
 	/* Set period size to settings.aica.BufferSize frames. */
-	period_size = settings.aica.BufferSize;
-	rc=snd_pcm_hw_params_set_period_size_near(handle, params, &period_size, &dir);
+	frames = 2 * 1024;//settings.aica.BufferSize;
+	rc=snd_pcm_hw_params_set_period_size_near(handle, params, &frames, &dir);
 	if (rc < 0)
 	{
 		fprintf(stderr, "Error:snd_pcm_hw_params_set_buffer_size_near %s\n", snd_strerror(rc));
 		return;
 	}
-	else
-		printf("ALSA: period size set to %ld\n", period_size);
-	buffer_size = (44100 * 100 /* settings.omx.Audio_Latency */ / 1000 / period_size + 1) * period_size;
-	rc=snd_pcm_hw_params_set_buffer_size_near(handle, params, &buffer_size);
+	frames*=4;
+	rc=snd_pcm_hw_params_set_buffer_size_near(handle, params, &frames);
 	if (rc < 0)
 	{
 		fprintf(stderr, "Error:snd_pcm_hw_params_set_buffer_size_near %s\n", snd_strerror(rc));
 		return;
 	}
-	else
-		printf("ALSA: buffer size set to %ld\n", buffer_size);
 
 	/* Write the parameters to the driver */
 	rc = snd_pcm_hw_params(handle, params);
@@ -132,10 +126,7 @@
 
 static u32 alsa_push(void* frame, u32 samples, bool wait)
 {
-	if (wait != pcm_blocking) {
-		snd_pcm_nonblock(handle, wait ? 0 : 1);
-		pcm_blocking = wait;
-	}
+	snd_pcm_nonblock(handle, wait ? 0 : 1);
 
 	int rc = snd_pcm_writei(handle, frame, samples);
 	if (rc == -EPIPE)
@@ -143,20 +134,7 @@
 		/* EPIPE means underrun */
 		fprintf(stderr, "ALSA: underrun occurred\n");
 		snd_pcm_prepare(handle);
-		// Write some silence then our samples
-		const size_t silence_size = period_size * 4;
-		void *silence = alloca(silence_size * 4);
-		memset(silence, 0, silence_size * 4);
-		rc = snd_pcm_writei(handle, silence, silence_size);
-		if (rc < 0)
-			fprintf(stderr, "ALSA: error from writei(silence): %s\n", snd_strerror(rc));
-		else if (rc < silence_size)
-			fprintf(stderr, "ALSA: short write from writei(silence): %d/%ld frames\n", rc, silence_size);
-		rc = snd_pcm_writei(handle, frame, samples);
-		if (rc < 0)
-			fprintf(stderr, "ALSA: error from writei(again): %s\n", snd_strerror(rc));
-		else if (rc < samples)
-			fprintf(stderr, "ALSA: short write from writei(again): %d/%d frames\n", rc, samples);
+		alsa_push(frame, samples * 8, wait);
 	}
 	else if (rc < 0)
 	{
