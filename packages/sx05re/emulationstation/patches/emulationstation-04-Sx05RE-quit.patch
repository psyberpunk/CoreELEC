diff U3 a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
--- a/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 16:55:16 2017
@@ -465,42 +702,52 @@
 	auto s = new GuiSettings(mWindow, "QUIT");
 
 	Window* window = mWindow;
-
 	ComponentListRow row;
-	if (UIModeController::getInstance()->isUIModeFull())
-	{
-		row.makeAcceptInputHandler([window] {
-			window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
-				[] {
-				if(quitES("/tmp/es-restart") != 0)
-					LOG(LogWarning) << "Restart terminated with non-zero result!";
-			}, "NO", nullptr));
-		});
-		row.addElement(std::make_shared<TextComponent>(window, "RESTART EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
-		s->addRow(row);
-
-
-
-		if(Settings::getInstance()->getBool("ShowExit"))
-		{
-			row.elements.clear();
-			row.makeAcceptInputHandler([window] {
-				window->pushGui(new GuiMsgBox(window, "REALLY QUIT?", "YES",
+
+			/* row.makeAcceptInputHandler([window] {
+				window->pushGui(new GuiMsgBox(window, "QUIT TO KODI? ", "YES",
 					[] {
+					remove("/var/lock/start.games");
+            		runSystemCommand("touch /var/lock/start.kodi");
+			        runSystemCommand("systemctl start kodi.service");
 					SDL_Event ev;
 					ev.type = SDL_QUIT;
 					SDL_PushEvent(&ev);
 				}, "NO", nullptr));
 			});
-			row.addElement(std::make_shared<TextComponent>(window, "QUIT EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			row.addElement(std::make_shared<TextComponent>(window, "START KODI", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			s->addRow(row); */
+
+			row.elements.clear();
+			row.makeAcceptInputHandler([window] {
+				window->pushGui(new GuiMsgBox(window, "QUIT TO RETROARCH? ", "YES",
+					[] {
+					remove("/var/lock/start.games");
+            		runSystemCommand("touch /var/lock/start.retro");
+			        runSystemCommand("systemctl start retroarch.service");
+					SDL_Event ev;
+					ev.type = SDL_QUIT;
+					SDL_PushEvent(&ev);
+				}, "NO", nullptr));
+			});
+			row.addElement(std::make_shared<TextComponent>(window, "START RETROARCH", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 			s->addRow(row);
-		}
-	}
+      
+       row.elements.clear();
+		row.makeAcceptInputHandler([window] {
+			window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
+				[] {
+    		   runSystemCommand("systemctl restart emustation.service");
+			}, "NO", nullptr));
+		});
+		row.addElement(std::make_shared<TextComponent>(window, "RESTART EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+		s->addRow(row);
+
 	row.elements.clear();
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
 			[] {
-			if (quitES("/tmp/es-sysrestart") != 0)
+			if (system("systemctl reboot") != 0)
 				LOG(LogWarning) << "Restart terminated with non-zero result!";
 		}, "NO", nullptr));
 	});
@@ -511,7 +758,7 @@
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY SHUTDOWN?", "YES",
 			[] {
-			if (quitES("/tmp/es-shutdown") != 0)
+			if (system("systemctl poweroff") != 0)
 				LOG(LogWarning) << "Shutdown terminated with non-zero result!";
 		}, "NO", nullptr));
 	});
